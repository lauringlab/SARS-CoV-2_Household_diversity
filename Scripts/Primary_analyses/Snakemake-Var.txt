### Author: Andrew Valesano modified by Emily Bendall
### Purpose: Get variant calls from alignment files (from Snakefile-BWA) with iVar.
### This is designed for using the ARTIC primers for SARS-CoV-2 sequenced on Illumina.

# ============================= How to run this pipeline ==========================

# 1. Modify the parameters below as needed ("rule parameters").
# 2. Load modules: module load Bioinformatics ivar python2.7-anaconda/2019.03 samtools/1.9 fastqc bowtie2/2.1.0 picard-tools bwa bedtools2 R
# 3. Activate snakemake: conda activate snakemake
# 4. Run job on Slurm: sbatch submit_variants.sbat -- Or run directly: snakemake -s Snakefile-variants -p --latency-wait 30 --cores 2

# ============================= Configure run options here =============================

SAMPLES, = glob_wildcards("data/aligned_output/primertrim_sorted/{sample}.removed.primertrim.sorted.bam") # Where the pipeline will grab all of the IDs to run. Important to have changed the filenames first.

rule all:
    input:
        expand ('data/ivar_output/ivar_consensus/{sample}.fa.bwt', sample=SAMPLES),
        expand ("data/ivar_output/variants_final/{sample}_1.variants.tsv", sample=SAMPLES),
        expand ("data/ivar_output/variants_final/{sample}.merged.tsv", sample=SAMPLES),
        "data/ivar_output/all_variants_filtered",
        #data/ivar_output/all.variants.csv",
        #"data/ivar_output/all.variants.filtered.csv"
        #expand("data/ivar_output/variants_final/{id}.variants.final.tsv", id = IDS),
	#expand("data/ivar_output/variants/{id}.variants.tsv", id = IDS)

rule parameters:
    params:
        reference_fasta = "~/ncov_references/bwa_ref/nCov_WH1_ref.fasta", # fasta used for alignment
        min_Q_score = 30, # minimum base quality for including base in mpileup
        min_mapQ = 20, # minimum mapping quality for including base in mpileup
        min_depth = 1, # minimum depth used in iVar variants
        freq_threshold = 0.05, # minimum frequency to call variants
        reference_gff = "~/ncov_references/WH1_ORFs.gff",
        bed_file = "~/ncov_references/ncov_ivar_bed.bed", # BED file for trimming primer sequences. Modified for ivar getmasked (added score parameter). See https://genome.ucsc.edu/FAQ/FAQformat.html#format1 and ivar documentation.
        primer_info = "~/ncov_references/primer.tsv",
        primer_fasta ="~/ncov_references/V3_primers.fa"

setup = rules.parameters.params

# ============================= Here are the pipeline rules =============================

rule bwa_build:
    message:
        """
        =======================================================
        index consensus sequence with bowtie2 build and Faidx
        =======================================================
        """
    input:
        'data/ivar_output/ivar_consensus/{sample}.fa' 
    output:
        'data/ivar_output/ivar_consensus/{sample}.fa.bwt',

    params:
        'data/ivar_output/ivar_consensus/{sample}'
    
    shell:
        """
        bwa index {input} {params}
        samtools faidx {input}
        """

rule create_primer_bam:
    message:
        """
        =======================================================
        Create primer bam file per sample ##Check these files
        =======================================================
        """
    input:
         sample_fasta= "data/ivar_output/ivar_consensus/{sample}.fa.bwt"
    output:
        "data/ivar_output/primer_bed/{sample}.bam"
    params:
        index = "data/ivar_output/ivar_consensus/{sample}.fa"
    shell:
        """
        bwa mem -k 5 -T 16 {params.index} {setup.primer_fasta} | samtools view -bS -F 4 | samtools sort -o {output}
        """

rule create_bed:
    message:
        """
        =======================================================
        Create primer bed file per sample
        =======================================================
        """
    input:
        "data/ivar_output/primer_bed/{sample}.bam"
    output:
        "data/ivar_output/primer_bed/{sample}.bed"
    shell:
        """
        bedtools bamtobed -i {input} > {output}
        """

rule call_variants_in_primer:
    message:
        """
        =======================================================
        Call variants in primers to get mismatches
        =======================================================
        """
    input:
        primer_bam = "data/ivar_output/primer_bed/{sample}.bam",
        sample_consensus = 'data/ivar_output/ivar_consensus/{sample}.fa'
    output:
        "data/ivar_output/primer_mismatches/{sample}.tsv"
    shell:
        "samtools mpileup -aa -A -d 100000 --reference {input.sample_consensus} -Q {setup.min_Q_score} -q {setup.min_mapQ} -F 0 {input.primer_bam} | ivar variants -p {output} -t {setup.freq_threshold}"


# may need to modify below to account for filenames, and correct inputs
rule mask:
    message:
        """
        =======================================================
        Mask primer segments with mismatches to consensus
        =======================================================
        """
    input:
        mismatch_tsv = "data/ivar_output/primer_mismatches/{sample}.tsv",
        sample_bed = "data/ivar_output/primer_bed/{sample}.bed",
    output:
        "data/ivar_output/mask/{sample}_masked_primer_names.txt"
    shell:
        "ivar getmasked -i {input.mismatch_tsv} -b {input.sample_bed}  -f {setup.primer_info} -p {output}"

rule remove_masked:
    message:
        """
        =======================================================
        Remove reads with mismatches to consensus
        =======================================================
        """
    input:
        bam_file_1 = "data/aligned_output/primertrim_sorted/{sample}.removed.primertrim.sorted.bam",
        mask_file = "data/ivar_output/mask/{sample}_masked_primer_names.txt",
    output:
        output_1 = "data/ivar_output/removed/{sample}.masked.sorted.bam", 
    params:
        remove_out_1 = "data/ivar_output/removed/{sample}.masked",
        temp_1 = "data/ivar_output/removed/{sample}.tmp",
    
    
    shell:
        """
        ivar removereads -i {input.bam_file_1} -p {params.remove_out_1} -t {input.mask_file} -b {setup.bed_file} 
        
        samtools sort -T {params.temp_1} -o {output.output_1} {params.remove_out_1}.bam
        
        samtools index {output.output_1}
        """

rule variants_post_removal:
    message:
        """
        =======================================================
        Call variants with iVar after mismatch removal
        =======================================================
        """
    input:
        inputA = "data/ivar_output/removed/{sample}.masked.sorted.bam",
    output:
        outputA ="data/ivar_output/variants_final/{sample}.variants.tsv",
    params:
        ivar_outA = "data/ivar_output/variants_final/{sample}.variants",
   
    shell:
        """
        samtools mpileup -aa -A -d 100000 -B -Q 0 -q {setup.min_mapQ} --reference {setup.reference_fasta} {input.inputA} | ivar variants -p {params.ivar_outA} -q {setup.min_Q_score} -t {setup.freq_threshold} -r {setup.reference_fasta} -g {setup.reference_gff} 
        """


rule filter_variants:
    message:
         """
        =======================================================
        Filter variants in R 
        =======================================================
        """
    input:
        sample= "data/ivar_output/variants_final/{sample}.merged.tsv",
        reference =  "../Cheart/ncov_references/bwa_ref/nCov_WH1_ref.fasta"
    output:
        "data/ivar_output/variants_final/{sample}.filtered"
    script:
        "filter_ivar.R"


rule collapse_all_variants:
     message:
         """
          =======================================================
          Collapse variants from all samples into one file
          =======================================================
         """
     input:
          expand ("data/ivar_output/variants_final/{sample}.filtered", sample=SAMPLES)
        
     output:
          "data/ivar_output/all_variants_filtered"
          
     shell:
          """          
          awk 'NR == 1 || FNR > 1'  {input}  >  {output}
          """

